require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe Admin::ThemeAssetsController do
  
  #for actions
  let(:site) { mock_model(Site, :id => "1") }
  let(:current_user) { logged_in(:role? => "admin", :site_id => site.id) }
  let(:theme_asset) { mock_model("ThemeAsset", :site_id => site.id).as_null_object }
  
  before(:each) do
    cas_faker(current_user.puid)
    stub_c_site_c_user(site, current_user)
  end
  
  describe "GET index" do
    def do_get
      get :index
    end
    
    let(:theme_assets) { [theme_asset] }
    let(:css_files) { [ theme_asset.stub("content_type" => "text/css") ] }
    let(:js_files) { [ theme_asset.stub("content_type" => "text/javascript") ] }
    let(:images) { [ theme_asset.stub("content_type" => "image/png") ] }
    
    before(:each) do
      ThemeAsset.stub(:accessible_by).and_return(theme_assets)
      ThemeAsset.stub(:css_files).and_return(css_files)
      ThemeAsset.stub(:js_files).and_return(js_files)
      ThemeAsset.stub(:images).and_return(images)
    end
    
    it "should receive accessible_by" do
      ThemeAsset.should_receive(:accessible_by).and_return(theme_assets)
      do_get
    end
    
    it "should assign theme_assets for the view" do
      do_get
      assigns(:theme_assets).should == theme_assets
    end
    
    it "should assign the css_files for the view" do
      do_get
      assigns(:css_files).should == css_files
    end
    
    it "should assign the js_files for the view" do
      do_get
      assigns(:js_files).should == js_files
    end
    
    it "should assign the images for the view" do
      do_get
      assigns(:images).should == images
    end
    
    it "should render in the index template" do
      do_get
      response.should render_template("admin/theme_assets/index")
    end    
  end
  
  describe "GET new" do
    before(:each) do
      ThemeAsset.stub(:new).and_return(theme_asset.as_new_record)
    end
    
    def do_get
      get :new
    end
    
    it "should receive new and return the new theme_asset" do
      ThemeAsset.should_receive(:new).and_return(theme_asset)
      do_get
    end
    
    it "should assign the new theme_asset to an ivar" do
      do_get
      assigns(:theme_asset).should == theme_asset
    end
    
    it "should render the view template admin/theme_assets/new" do
      do_get
      response.should render_template("admin/theme_assets/new")
    end  
  end
  
  describe "POST create" do
    let(:params) { { "name" => "foobar", "source_cache" => "1/rails.png", "source" => AssetFixtureHelper.open("rails.png") } }
    
    before(:each) do
      ThemeAsset.stub(:new).and_return(theme_asset.as_new_record)
    end
    
    def do_post(post_params=params)
      post :create, "theme_asset" => post_params
    end
    
    it "should receive new and return the new theme_asset from the params" do
      ThemeAsset.should_receive(:new).and_return(theme_asset)
      do_post
    end
    
    it "should assign @theme_asset" do
      do_post
      assigns(:theme_asset).should == theme_asset
    end
    
    context "with valid params" do
      it "should receive and save the theme_asset" do
        theme_asset.should_receive(:save).and_return(true)
        do_post
      end
      
      it "should assign to the flash message" do
        do_post
        flash[:notice].should == "Successfully created the theme asset #{theme_asset.name}"
      end
    end
    
    context "using source_cache when source is nil on redisplay, ie validation fails" do
      it "should set the source to the source_cache when the source_cache is not empty and the source is nil" do   
        theme_asset.stub_chain(:source, :retrieve_from_cache!)
        theme_asset.stub_chain(:source, :store!)
        controller.should_receive(:set_from_cache)
        do_post({ "source_cache" => "1/rails.png"})
      end
    end
    
    context "with invalid params" do
      before(:each) do
        theme_asset.stub(:save).and_return(false)
      end
      
      it "should receive save and return false " do
        theme_asset.should_receive(:save).and_return(false)
        do_post
      end
      
      it "should render the new template" do
        do_post
        response.should render_template("admin/theme_assets/new")
      end
    end
    
  end
end