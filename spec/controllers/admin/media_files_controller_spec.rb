require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe Admin::MediaFilesController do

  #for actions
  let(:current_user) { logged_in(:role? => true) }
  let(:media_file) { mock_model("MediaFile").as_null_object }
  
  before(:each) do
    cas_faker(current_user.puid)
  end

  # -- GET Index ----------------------------------------------- 
  describe "GET index" do
    def do_get     
      get :index
    end
    
    let(:media_files) { [mock_model("MediaFile"), mock_model("MediaFile")] }
    
    before(:each) do
      MediaFile.stub(:accessible_by).and_return(media_files)
    end
    
    
    it "should receive accessible_by" do
      MediaFile.should_receive(:accessible_by).and_return(media_files)
      do_get
    end
    
    it "should assign the found media_files" do
      do_get
      assigns(:media_files).should == media_files
    end
    
    it "should render the index template" do
      do_get
      response.should render_template("admin/media_files/index")
    end
  end

  describe "GET show" do
    it "assigns the requested media_file as @media_file" do
      Admin::MediaFile.stub(:find).with("37") { mock_media_file }
      get :show, :id => "37"
      assigns(:media_file).should be(mock_media_file)
    end
  end

  describe "GET new" do
    it "assigns a new media_file as @media_file" do
      Admin::MediaFile.stub(:new) { mock_media_file }
      get :new
      assigns(:media_file).should be(mock_media_file)
    end
  end

  describe "GET edit" do
    it "assigns the requested media_file as @media_file" do
      Admin::MediaFile.stub(:find).with("37") { mock_media_file }
      get :edit, :id => "37"
      assigns(:media_file).should be(mock_media_file)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created media_file as @media_file" do
        Admin::MediaFile.stub(:new).with({'these' => 'params'}) { mock_media_file(:save => true) }
        post :create, :media_file => {'these' => 'params'}
        assigns(:media_file).should be(mock_media_file)
      end

      it "redirects to the created media_file" do
        Admin::MediaFile.stub(:new) { mock_media_file(:save => true) }
        post :create, :media_file => {}
        response.should redirect_to(admin_media_file_url(mock_media_file))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved media_file as @media_file" do
        Admin::MediaFile.stub(:new).with({'these' => 'params'}) { mock_media_file(:save => false) }
        post :create, :media_file => {'these' => 'params'}
        assigns(:media_file).should be(mock_media_file)
      end

      it "re-renders the 'new' template" do
        Admin::MediaFile.stub(:new) { mock_media_file(:save => false) }
        post :create, :media_file => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested media_file" do
        Admin::MediaFile.stub(:find).with("37") { mock_media_file }
        mock_admin_media_file.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :media_file => {'these' => 'params'}
      end

      it "assigns the requested media_file as @media_file" do
        Admin::MediaFile.stub(:find) { mock_media_file(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:media_file).should be(mock_media_file)
      end

      it "redirects to the media_file" do
        Admin::MediaFile.stub(:find) { mock_media_file(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(admin_media_file_url(mock_media_file))
      end
    end

    describe "with invalid params" do
      it "assigns the media_file as @media_file" do
        Admin::MediaFile.stub(:find) { mock_media_file(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:media_file).should be(mock_media_file)
      end

      it "re-renders the 'edit' template" do
        Admin::MediaFile.stub(:find) { mock_media_file(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested media_file" do
      Admin::MediaFile.stub(:find).with("37") { mock_media_file }
      mock_admin_media_file.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the admin_media_files list" do
      Admin::MediaFile.stub(:find) { mock_media_file }
      delete :destroy, :id => "1"
      response.should redirect_to(admin_media_files_url)
    end
  end

end
