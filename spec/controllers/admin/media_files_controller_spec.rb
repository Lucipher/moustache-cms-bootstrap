require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe Admin::MediaFilesController do

  #for actions
  let(:site) { mock_model(Site, :id => "1") }
  let(:current_user) { logged_in(:role? => "admin", :site_id => site.id) }
  let(:media_file) { mock_model("MediaFile", :site_id => site.id).as_null_object }
  
  before(:each) do
    cas_faker(current_user.puid)
    stub_c_site_c_user(site, current_user)
  end

  # -- GET Index ----------------------------------------------- 
  describe "GET index" do
    def do_get     
      get :index
    end
    
    let(:media_files) { [mock_model("MediaFile"), mock_model("MediaFile")] }
    
    before(:each) do
      MediaFile.stub(:accessible_by).and_return(media_files)
    end
    
    
    it "should receive accessible_by" do
      MediaFile.should_receive(:accessible_by).and_return(media_files)
      do_get
    end
    
    it "should assign the found media_files" do
      do_get
      assigns(:media_files).should == media_files
    end
    
    it "should render the index template" do
      do_get
      response.should render_template("admin/media_files/index")
    end
  end
  
  describe "GET new" do
    def do_get
      get :new
    end
    
    before(:each) do
      media_file.as_new_record
      MediaFile.stub(:new).and_return(media_file)
    end
    
    it "should receive new and return a new media_file" do
      MediaFile.should_receive(:new).and_return(media_file)
      do_get
    end
    
    it "should assign the new media_file for the view" do
      do_get
      assigns(:media_file).should == media_file
    end
    
    it "should render the new template" do
      do_get
      response.should render_template("admin/media_files/new")
    end
  end
  
  describe "POST create" do
    before(:each) do
      media_file.as_new_record
      MediaFile.stub(:new).and_return(media_file)
    end
    
    def do_post(params={})
      post :create, "media_file" => params
    end
    
    it "should create a new media_file from the params" do
      MediaFile.should_receive(:new).with({"these" => "params"}).and_return(media_file)
      do_post({ "these" => "params" })
    end
    
    it "should assign the @media_file for the view" do
      do_post
      assigns(:media_file).should == media_file
    end
    
    it "should assign created_by and updated_by to the current user" do
      controller.should_receive(:created_updated_by_for).with(media_file)
      do_post
    end
    
    it "should assign the @current_site to the media_file" do
      media_file.should_receive(:attributes=)
      do_post
    end
      
    context "with valid params" do
      it "should receive and save the media_file" do
        media_file.should_receive(:save).and_return(true)
        do_post
      end
      
      it "should assign a flash message that the media_file was saved" do
        do_post
        flash[:notice].should == "Successfully created the media file #{media_file.name}"
      end
      
      it "should redirect to the admin/media_files/index" do
        do_post
        response.should redirect_to(admin_media_files_path)
      end
    end
    
    context "with invalid params" do
      before(:each) do
        media_file.stub(:save).and_return(false)
      end
      
      it "should receive save and return false" do
        media_file.should_receive(:save).and_return(false)
        do_post
      end
      
      it "should render the new template" do
        do_post
        response.should render_template("admin/media_files/new")
      end
    end
  end
  
  describe "GET edit" do
    before(:each) do
      MediaFile.stub(:find).and_return(media_file)
    end
    
    def do_get
      get :edit, "id" => media_file.to_param
    end
    
    it "should should receive MediaFile#find and return the media_file" do
      MediaFile.should_receive(:find).and_return(media_file)
      do_get
    end

    it "should assign @media_file for the view" do
      do_get
      assigns(:media_file).should == media_file
    end

    it "should render the template admin/media_file/edit" do
      do_get
      response.should render_template("admin/media_files/edit")
    end    
  end

  describe "PUT update" do
    before(:each) do
      MediaFile.stub(:find).and_return(media_file)
    end
    
    def do_put
      post :update, { "id" => media_file.to_param, "media_file" => { "name" => "foobar" }}
    end
    
    it "should receive the MediaFile#find and return the media file" do
      MediaFile.should_receive(:find).with(media_file.to_param).and_return(media_file)
      do_put
    end
    
    it "should assign @media_file for the view" do
      do_put
      assigns(:media_file).should == media_file
    end
    
    it "should update updated_by attribute" do
      media_file.should_receive(:updated_by=).with(current_user)
      do_put
    end
    
    describe "with valid params" do
      it "should receive update_attributes and return true" do
        media_file.should_receive(:update_attributes).and_return(true)
        do_put
      end
      
      it "should assign the flash message with successful update" do
        do_put
        flash[:notice].should == "Successfully updated the media file #{media_file.name}"
      end
      
      it "should redirect to the media_file index page" do
        do_put
        response.should redirect_to(admin_media_files_path)
      end
    end
    
    describe "without valid params" do
      before(:each) do
        media_file.stub(:update_attributes).and_return(false)
      end
      
      it "should receive update_attributes and return false" do
        media_file.should_receive(:update_attributes).and_return(false)
        do_put
      end
      
      it "should render the media_file edit template on failed update" do
        do_put
        response.should render_template("admin/media_files/edit")
      end
    end
  end

  describe "DELETE destroy" do
    before(:each) do
      MediaFile.stub(:find).and_return(media_file)
    end
    
    def do_destroy
      delete :destroy, "id" => media_file.to_param
    end
    
    it "should receive the MediaFile#find and return the media file" do
      MediaFile.should_receive(:find).with(media_file.to_param).and_return(media_file)
      do_destroy
    end
    
    it "should assign the flash message that the media file was successfully destroyed" do
      do_destroy
      flash[:notice].should == "Successfully deleted the media file #{media_file.name}"
    end
    
    it "should redirect to admin/media_file/index when the file is destroyed" do
      do_destroy
      response.should redirect_to(admin_media_files_path)
    end
  end
end
